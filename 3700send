#!/usr/bin/env python3

import sys
import socket
import datetime
import json

MSG_SIZE = 1500
DATA_SIZE = 1472
TIMEOUT = .25
sentAcks = []

def logPacket(packet):
  sentAcks.append(packet)

def duplicate(packet):
  for ack in sentAcks:
    if packet == ack:
      return True
  return False


def log(string):
  sys.stderr.write(datetime.datetime.now().strftime("%H:%M:%S.%f") + " " + string + "\n")
  sys.stderr.flush()

def send_next_packet(seqn, sock, dest):
  msg = {"sequence": seqn, "data": "", "ack": False, "eof": False}
  overhead = len(json.dumps(msg))
  msg["data"] = sys.stdin.read(DATA_SIZE - overhead)

  log(f"sent {msg}")

  if len(msg["data"]) > 0:
    assert (len(msg) <= DATA_SIZE), f"ERROR: Datagram is longer ({len(msg)}) than {DATA_SIZE} bytes!!!"
    
    if sock.sendto(json.dumps(msg).encode('ascii'), dest) < len(msg):
      log("[error] unable to fully send packet")
    else:
      log("[send data] " + str(seqn) + " (" + str(len(msg["data"])) + ")")
      logPacket(msg)
    return {"msg":msg, "seqn" :seqn + len(msg["data"])}
  return {"msg": msg, "seqn":seqn}

def main():
  # Bind to localhost and an ephemeral port
  ip_port = sys.argv[1]
  udp_ip = ip_port[0:ip_port.find(":")]
  udp_port = int(ip_port[ip_port.find(":")+1:])
  dest = (udp_ip, udp_port)
  seqn = 0

  # Set up the socket
  sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
  sock.settimeout(TIMEOUT)

  # Send first packet
  temp = send_next_packet(seqn, sock, dest)
  seqn = temp['seqn']
  pkt = temp['msg']

  # Now read in data, send packets
  while True:
    log("ABOUT TO SLEEP")

    while True:
      try:
        result = sock.recvfrom(MSG_SIZE)
      except:
        log(f"except")
        sock.sendto(json.dumps(pkt).encode('ascii'), dest)
        continue
      else:
        log(f"{result}")
        break

    if result:
      (data, _addr) = result
      data = data.decode('ascii')

      try:
        decoded = json.loads(data)

        # If there is an ack, send next packet
        if not duplicate(decoded['ack']) and decoded['ack'] == seqn:
          log(f"[recv ack] {seqn}")
          logPacket(seqn)
          # Try to send next packet; break if no more data
          new_packet = send_next_packet(seqn, sock, dest)
          if new_packet['seqn'] == seqn:
            break
          seqn = new_packet['seqn']
          pkt = new_packet['msg']  
      except (ValueError, KeyError, TypeError):
        log("[recv corrupt packet]")
    else:
      log("[error] timeout")
      sys.exit(-1)

    log(f"(seqn {seqn})")

  sock.sendto(json.dumps({"eof": True, "data": "", "sequence": seqn, "ack": False}).encode('ascii'), dest)
  while True:
    try:
      result = sock.recvfrom(MSG_SIZE)
    except:
      sock.sendto(json.dumps({"eof": True, "data": "", "sequence": seqn, "ack": False}).encode('ascii'), dest)
      continue
    else:
      break
  log("[completed]")
  sys.exit(0)

if __name__ == '__main__':
  main()
